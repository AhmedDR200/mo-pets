{
  "openapi": "3.0.0",
  "info": {
    "title": "MO API",
    "version": "1.0.0",
    "description": "API documentation for Pets Care E-Commerce"
  },
  "servers": [
    {
      "url": "http://localhost:{port}",
      "variables": {
        "port": {
          "default": "3000"
        }
      }
    },
    {
      "url": "https://mo-pets.vercel.app"
    }
  ],
  "tags": [
    { "name": "Health", "description": "Server health and status" },
    { "name": "Categories", "description": "Category CRUD and listing" },
    {
      "name": "SubCategories",
      "description": "Subcategory CRUD and listing"
    },
    { "name": "Products", "description": "Product CRUD and listing" },
    { "name": "Offers", "description": "Offer CRUD and listing" },
    { "name": "Sliders", "description": "Slider CRUD operations" }
  ],
  "paths": {
    "/api/sliders": {
      "get": {
        "summary": "List all sliders",
        "description": "Get a list of all sliders with pagination",
        "tags": ["Sliders"],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": { "type": "integer", "default": 1 },
            "description": "Page number for pagination"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "default": 10 },
            "description": "Number of sliders per page"
          }
        ],
        "responses": {
          "200": {
            "description": "List of sliders",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "success" },
                    "results": { "type": "integer", "example": 5 },
                    "totalCount": { "type": "integer", "example": 20 },
                    "page": { "type": "integer", "example": 1 },
                    "limit": { "type": "integer", "example": 10 },
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/Slider" }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new slider",
        "description": "Add a new slider image",
        "tags": ["Sliders"],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "image": {
                    "type": "string",
                    "format": "binary",
                    "description": "Slider image file"
                  },
                  "alt": {
                    "type": "string",
                    "description": "Alternative text for the image"
                  },
                  "active": {
                    "type": "boolean",
                    "description": "Whether the slider is active"
                  },
                  "order": {
                    "type": "integer",
                    "description": "Display order of the slider"
                  }
                },
                "required": ["image"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Slider created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "success" },
                    "data": { "$ref": "#/components/schemas/Slider" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/sliders/active": {
      "get": {
        "summary": "Get active sliders",
        "description": "Get all active sliders for display on the website",
        "tags": ["Sliders"],
        "responses": {
          "200": {
            "description": "List of active sliders",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "success" },
                    "results": { "type": "integer", "example": 5 },
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/Slider" }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/sliders/{id}": {
      "get": {
        "summary": "Get slider by ID",
        "description": "Get details of a specific slider",
        "tags": ["Sliders"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Slider ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Slider details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "success" },
                    "data": { "$ref": "#/components/schemas/Slider" }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Slider not found"
          }
        }
      },
      "delete": {
        "summary": "Delete slider",
        "description": "Delete a slider by ID",
        "tags": ["Sliders"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Slider ID"
          }
        ],
        "responses": {
          "204": {
            "description": "Slider deleted successfully"
          },
          "404": {
            "description": "Slider not found"
          }
        }
      }
    },
    "/api/sliders/{id}/toggle-status": {
      "patch": {
        "summary": "Toggle slider status",
        "description": "Toggle the active status of a slider",
        "tags": ["Sliders"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Slider ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Slider status updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "success" },
                    "data": { "$ref": "#/components/schemas/Slider" }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Slider not found"
          }
        }
      }
    },
    "/api/offers": {
      "get": {
        "summary": "List offers",
        "description": "Get a list of all offers with pagination, sorting, and filtering options",
        "tags": ["Offers"],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": { "type": "integer", "default": 1 },
            "description": "Page number for pagination"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "default": 10 },
            "description": "Number of offers per page"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": { "type": "string", "default": "-createdAt" },
            "description": "Sort field and direction (prefix with - for descending)"
          },
          {
            "name": "active",
            "in": "query",
            "schema": { "type": "boolean" },
            "description": "Filter by active status (true/false)"
          },
          {
            "name": "current",
            "in": "query",
            "schema": { "type": "boolean" },
            "description": "Filter for currently active offers (within start and end dates)"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "success" },
                    "results": { "type": "integer" },
                    "paginationInfo": {
                      "type": "object",
                      "properties": {
                        "currentPage": { "type": "integer" },
                        "totalPages": { "type": "integer" },
                        "limit": { "type": "integer" },
                        "totalDocuments": { "type": "integer" }
                      }
                    },
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/OfferResponse" }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create offer",
        "description": "Create a new offer with discount that will be applied to the specified products. Products must not already have active offers.",
        "tags": ["Offers"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/OfferCreate" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "success" },
                    "data": { "$ref": "#/components/schemas/OfferResponse" }
                  }
                }
              }
            }
          },
          "400": { 
            "description": "Bad request - One or more products already have an active offer or end date is not after start date" 
          },
          "404": { 
            "description": "One or more products not found" 
          }
        }
      }
    },
    "/api/offers/{id}": {
      "get": {
        "summary": "Get offer by ID",
        "description": "Get detailed information about a specific offer",
        "tags": ["Offers"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Offer ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "success" },
                    "data": { "$ref": "#/components/schemas/OfferResponse" }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Offer not found"
          }
        }
      },
      "patch": {
        "summary": "Update offer",
        "description": "Update an existing offer. When updating products, checks are performed to ensure new products don't already have active offers. If products are removed from the offer, their original prices are restored.",
        "tags": ["Offers"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Offer ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/OfferUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string", "example": "success" },
                    "data": { "$ref": "#/components/schemas/OfferResponse" }
                  }
                }
              }
            }
          },
          "400": { 
            "description": "Bad request - One or more products already have an active offer, end date is not after start date, or invalid data" 
          },
          "404": { 
            "description": "Offer not found or one or more products not found" 
          }
        }
      },
      "delete": {
        "summary": "Delete offer",
        "description": "Delete an offer and restore original prices for all associated products. This is handled by the Offer model post-delete middleware.",
        "tags": ["Offers"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Offer ID"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content - Offer deleted successfully and product prices restored"
          },
          "404": {
            "description": "Offer not found"
          }
        }
      }
    },
    "/api/health": {
      "get": {
        "summary": "Health check",
        "tags": ["Health"],
        "responses": {
          "200": {
            "description": "Server is running"
          }
        }
      }
    },
    "/api/categories": {
      "get": {
        "summary": "List categories",
        "tags": ["Categories"],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": { "type": "integer", "default": 1 }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "default": 10 }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": { "type": "string", "default": "-createdAt" }
          }
        ],
        "responses": { "200": { "description": "Success" } }
      },
      "post": {
        "summary": "Create category",
        "tags": ["Categories"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CategoryCreate" }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string" },
                  "description": { "type": "string" },
                  "image": {
                    "type": "string",
                    "format": "binary",
                    "description": "Image file to upload"
                  }
                },
                "required": ["name", "description"]
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Created" },
          "400": { "description": "Bad Request" },
          "409": { "description": "Conflict" }
        }
      }
    },
    "/api/categories/{id}": {
      "get": {
        "summary": "Get category",
        "tags": ["Categories"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Success" },
          "404": { "description": "Not Found" }
        }
      },
      "patch": {
        "summary": "Update category",
        "tags": ["Categories"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CategoryUpdate" }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string" },
                  "description": { "type": "string" },
                  "image": {
                    "type": "string",
                    "format": "binary",
                    "description": "Image file to upload"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Updated" },
          "404": { "description": "Not Found" }
        }
      },
      "delete": {
        "summary": "Delete category",
        "tags": ["Categories"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Deleted" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/api/subcategories": {
      "get": {
        "summary": "List subcategories",
        "tags": ["SubCategories"],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": { "type": "integer", "default": 1 }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "default": 10 }
          },
          { "name": "category", "in": "query", "schema": { "type": "string" } }
        ],
        "responses": { "200": { "description": "Success" } }
      },
      "post": {
        "summary": "Create subcategory",
        "tags": ["SubCategories"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SubCategoryCreate" }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string" },
                  "description": { "type": "string" },
                  "image": {
                    "type": "string",
                    "format": "binary",
                    "description": "Image file to upload"
                  },
                  "category": { "type": "string" }
                },
                "required": ["name", "description", "category"]
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Created" },
          "400": { "description": "Bad Request" },
          "409": { "description": "Conflict" }
        }
      }
    },
    "/api/subcategories/{id}": {
      "get": {
        "summary": "Get subcategory",
        "tags": ["SubCategories"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Success" },
          "404": { "description": "Not Found" }
        }
      },
      "patch": {
        "summary": "Update subcategory",
        "tags": ["SubCategories"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SubCategoryUpdate" }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string" },
                  "description": { "type": "string" },
                  "image": {
                    "type": "string",
                    "format": "binary",
                    "description": "Image file to upload"
                  },
                  "category": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Updated" },
          "404": { "description": "Not Found" }
        }
      },
      "delete": {
        "summary": "Delete subcategory",
        "tags": ["SubCategories"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Deleted" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/api/products": {
      "get": {
        "summary": "List products",
        "tags": ["Products"],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": { "type": "integer", "default": 1 }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "default": 10 }
          },
          { "name": "category", "in": "query", "schema": { "type": "string" } },
          {
            "name": "subCategory",
            "in": "query",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "Success" } }
      },
      "post": {
        "summary": "Create product",
        "tags": ["Products"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ProductCreate" }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string" },
                  "price": { "type": "number", "minimum": 0 },
                  "stock": { "type": "integer", "minimum": 0 },
                  "description": { "type": "string" },
                  "image": {
                    "type": "string",
                    "format": "binary",
                    "description": "Image file to upload"
                  },
                  "category": { "type": "string" },
                  "subCategory": { "type": "string" }
                },
                "required": [
                  "name",
                  "price",
                  "stock",
                  "category",
                  "subCategory"
                ]
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Created" },
          "400": { "description": "Bad Request" },
          "409": { "description": "Conflict" }
        }
      }
    },
    "/api/products/{id}": {
      "get": {
        "summary": "Get product",
        "tags": ["Products"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Success" },
          "404": { "description": "Not Found" }
        }
      },
      "patch": {
        "summary": "Update product",
        "tags": ["Products"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ProductUpdate" }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string" },
                  "price": { "type": "number", "minimum": 0 },
                  "stock": { "type": "integer", "minimum": 0 },
                  "description": { "type": "string" },
                  "image": {
                    "type": "string",
                    "format": "binary",
                    "description": "Image file to upload"
                  },
                  "category": { "type": "string" },
                  "subCategory": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Updated" },
          "404": { "description": "Not Found" }
        }
      },
      "delete": {
        "summary": "Delete product",
        "tags": ["Products"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Deleted" },
          "404": { "description": "Not Found" }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Slider": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c85"
          },
          "image": {
            "type": "string",
            "example": "https://res.cloudinary.com/example/image/upload/v1624291234/sliders/image1.jpg"
          },
          "alt": {
            "type": "string",
            "example": "Slider image"
          },
          "active": {
            "type": "boolean",
            "example": true
          },
          "order": {
            "type": "integer",
            "example": 1
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-06-15T10:00:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-06-15T10:00:00.000Z"
          }
        }
      },
      "CategoryCreate": {
        "type": "object",
        "required": ["name", "description"],
        "properties": {
          "name": { "type": "string" },
          "description": { "type": "string" },
          "image": { "type": "string" }
        }
      },
      "CategoryUpdate": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "description": { "type": "string" },
          "image": { "type": "string" }
        }
      },
      "SubCategoryCreate": {
        "type": "object",
        "required": ["name", "description", "category"],
        "properties": {
          "name": { "type": "string" },
          "description": { "type": "string" },
          "image": { "type": "string" },
          "category": { "type": "string" }
        }
      },
      "SubCategoryUpdate": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "description": { "type": "string" },
          "image": { "type": "string" },
          "category": { "type": "string" }
        }
      },
      "ProductCreate": {
        "type": "object",
        "required": ["name", "price", "stock", "category", "subCategory"],
        "properties": {
          "name": { "type": "string" },
          "price": { "type": "number", "minimum": 0 },
          "stock": { "type": "integer", "minimum": 0 },
          "description": { "type": "string" },
          "image": { "type": "string" },
          "category": { "type": "string" },
          "subCategory": { "type": "string" }
        }
      },
      "ProductUpdate": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "price": { "type": "number", "minimum": 0 },
          "stock": { "type": "integer", "minimum": 0 },
          "description": { "type": "string" },
          "image": { "type": "string" },
          "category": { "type": "string" },
          "subCategory": { "type": "string" }
        }
      },
      "ProductResponse": {
        "type": "object",
        "properties": {
          "_id": { "type": "string" },
          "name": { "type": "string" },
          "price": { "type": "number" },
          "originalPrice": { 
            "type": "number",
            "description": "Original price before discount (only present when product has active offer)"
          },
          "discountedPrice": { 
            "type": "number",
            "description": "Discounted price (only present when product has active offer)"
          },
          "hasActiveOffer": { 
            "type": "boolean",
            "description": "Indicates if product currently has an active offer applied"
          },
          "stock": { "type": "integer" },
          "description": { "type": "string" },
          "images": { 
            "type": "array",
            "items": { "type": "string" }
          },
          "category": { 
            "type": "object",
            "properties": {
              "_id": { "type": "string" },
              "name": { "type": "string" }
            }
          },
          "subCategory": { 
            "type": "object",
            "properties": {
              "_id": { "type": "string" },
              "name": { "type": "string" }
            }
          },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" }
        }
      },
      "OfferCreate": {
        "type": "object",
        "required": ["title", "description", "discount", "startDate", "endDate", "products"],
        "properties": {
          "title": {
            "type": "string",
            "minLength": 3,
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "minLength": 20
          },
          "discount": {
            "type": "number",
            "minimum": 1,
            "maximum": 99,
            "description": "Discount percentage (1-99)"
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "description": "Offer start date and time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "description": "Offer end date and time (must be after startDate)"
          },
          "products": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid",
              "description": "Product IDs to apply the offer to"
            },
            "description": "Products that will have this discount applied"
          },
          "active": {
            "type": "boolean",
            "default": true,
            "description": "Whether the offer is active"
          }
        }
      },
      "OfferUpdate": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "minLength": 3,
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "minLength": 20
          },
          "discount": {
            "type": "number",
            "minimum": 1,
            "maximum": 99,
            "description": "Discount percentage (1-99)"
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "description": "Offer start date and time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "description": "Offer end date and time (must be after startDate)"
          },
          "products": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Products that will have this discount applied"
          },
          "active": {
            "type": "boolean",
            "description": "Whether the offer is active"
          }
        }
      },
      "OfferResponse": {
        "type": "object",
        "properties": {
          "_id": { "type": "string" },
          "title": { "type": "string" },
          "description": { "type": "string" },
          "discount": { 
            "type": "number",
            "description": "Discount percentage (1-99)"
          },
          "startDate": { "type": "string", "format": "date-time" },
          "endDate": { "type": "string", "format": "date-time" },
          "products": { 
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "_id": { "type": "string" },
                "title": { "type": "string" },
                "price": { "type": "number" },
                "images": {
                  "type": "array",
                  "items": { "type": "string" }
                }
              }
            },
            "description": "Array of products with applied discounts"
          },
          "active": { 
            "type": "boolean",
            "description": "Whether the offer is active and discounts are applied"
          },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" }
        }
      }
    }
  }
}
